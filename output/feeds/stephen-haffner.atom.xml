<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Stephen J. Haffner | kd8zev</title><link href="http://haffner.me/" rel="alternate"></link><link href="http://haffner.me/feeds/stephen-haffner.atom.xml" rel="self"></link><id>http://haffner.me/</id><updated>2016-01-31T00:00:00-05:00</updated><entry><title>Finally back online!</title><link href="http://haffner.me/finally-back-online.html" rel="alternate"></link><updated>2016-01-31T00:00:00-05:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2016-01-31:finally-back-online.html</id><summary type="html">&lt;p&gt;After being down for several months I have finally gotten my site back up and running! I originally took the site down because I wanted to play around with virtualisation on my server. I ended up playing with OpenStack, XEN, KVM, LXC, and Docker but I finally settled on plain KVM and I now have a KVM host up and running on my Cincinnati server (this site is hosted on a VPS instead of my KVM host for the time being).&lt;/p&gt;
&lt;p&gt;Now that this is back up its time to tackle setting up my own mail server!&lt;/p&gt;</summary></entry><entry><title>Intro to PGP</title><link href="http://haffner.me/intro-to-pgp.html" rel="alternate"></link><updated>2014-12-09T00:00:00-05:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2014-12-09:intro-to-pgp.html</id><summary type="html">&lt;div class="section" id="public-and-private-keys"&gt;
&lt;h2&gt;Public and Private Keys&lt;/h2&gt;
&lt;p&gt;When someone uses PGP they generate a pair of keys; one private key and one public key. The private key is kept by the person who made it and the public key is given to anyone she/he wants to communicate with.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-vs-encryption"&gt;
&lt;h2&gt;Signing vs Encryption&lt;/h2&gt;
&lt;p&gt;PGP can accomplish two things, encryption and signing. &lt;strong&gt;Signing&lt;/strong&gt; is used to verify that a message or file came from a certain person and has not been tampered with. &lt;strong&gt;Encryption&lt;/strong&gt; is used to make the contents of a message or file private so it is unreadable to anyone but the desired recipient.&lt;/p&gt;
&lt;p&gt;Signing does NOT provide privacy and encryption does NOT provide verification! To achieve both privacy and validation, a message or file must be both signed and encrypted. The following examples attempt to illustrate this.&lt;/p&gt;
&lt;div class="section" id="no-pgp"&gt;
&lt;h3&gt;No PGP&lt;/h3&gt;
&lt;p&gt;Alice sends Bob an email but Eve intercepts the email. Not only is Eve able to read Alice's message, she is also able to change the message before Bob reads it and neither Eve nor Bob know that the message was read and modified by Eve.&lt;/p&gt;
&lt;p&gt;Eve poses as Alice and sends Bob a message. Since Bob and Alice do not use PGP, Bob has no way of knowing that the message did not come from Alice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just-signing"&gt;
&lt;h3&gt;Just Signing&lt;/h3&gt;
&lt;p&gt;Alice signs a message with her private key and emails it to Bob. Eve intercepts the email and is able to read it, but she notices that is has been signed by Alice. If Eve modifies the message Bob will know when he tries to use Alice's public key to verify the signature.&lt;/p&gt;
&lt;p&gt;Eve poses as Alice and sends Bob a message. Since Bob expects all of Alice's messages to be signed with her private key he is suspicious of the message and contacts Alice to check if she actually sent him the message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="just-encryption"&gt;
&lt;h3&gt;Just Encryption&lt;/h3&gt;
&lt;p&gt;Alice encrypts a message to Bob using Bob's public key. Eve intercepts the email but can not read the contents of the message since it is encrypted. Eve has no good way to modify the message because she doesn't know what the message contained. Bob receives the message and is able to decrypt and read it.&lt;/p&gt;
&lt;p&gt;Eve poses as Alice and encrypts a message to Bob using Bob's public key. Bob receives the message and is able to decrypt and read it but has no way to know that Alice did not send it to him.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-and-encryption"&gt;
&lt;h3&gt;Signing and Encryption&lt;/h3&gt;
&lt;p&gt;Alice encrypts a message to Bob using Bob's public key and signs it using her private key. Even intercepts the message but cannot read or modify it since it is encrypted and signed. Bob receives the message, uses Alice's public key to verify that the message came from Alice, and uses his private key to decrypt the message so he can read it.&lt;/p&gt;
&lt;p&gt;Eve poses as Alice and encrypts a message to Bob using his public key. Bob receives the message and is able to decrypt it using his private key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="multiple-recipients"&gt;
&lt;h3&gt;Multiple Recipients&lt;/h3&gt;
&lt;p&gt;Alice signs a message with her private key and sends it to Bob and Charlie. Bob and Charlie are both able to use Alice's public key to verify that it came from Alice.&lt;/p&gt;
&lt;p&gt;Alice encrypts a message using both Bob's and Charlie's public keys. Both Bob and Charlie are able to decrypt the message with their own private keys.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="signing-software"&gt;
&lt;h2&gt;Signing Software&lt;/h2&gt;
&lt;p&gt;All of the examples in this article have been about signing and encrypting messages. PGP is often used to sign releases of certain software. For example, the developers of Debian publish a PGP signature for each version ISO so you can verify that the ISO was not corrupted or modified while you were downloading it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="key-signing-web-of-trust"&gt;
&lt;h2&gt;Key signing (Web of Trust)&lt;/h2&gt;
&lt;p&gt;In additions to signing files and messages, PGP keys can also be signed. For example:&lt;/p&gt;
&lt;p&gt;Alice knows that Bob's key belongs to Bob, so she signs Bob's public key. Bob knows that Charlie's key belongs to Charlie so Bob signs Charlie's public key. Since Alice's key trusts Bob's key and Bob's key trusts Charlie's key, Alice can be fairly confident that Charlie's key is trustworthy so she can trust anything signed with Charlie's key.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>What is "signature.asc"?</title><link href="http://haffner.me/sig.html" rel="alternate"></link><updated>2014-12-08T00:00:00-05:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2014-12-08:sig.html</id><summary type="html">&lt;p&gt;The &amp;quot;signature.asc&amp;quot; attachment on my emails is my digital PGP signature. It allows people to verify that the email they recieved came from me and was not modified by a third party. Most people can completely ignore it and continue reading my email.&lt;/p&gt;
&lt;div class="section" id="where-can-i-get-your-pgp-keys"&gt;
&lt;h2&gt;Where can I get your PGP keys?&lt;/h2&gt;
&lt;p&gt;A list of my &lt;a class="reference external" href="http://haffner.me/pages/pgp/"&gt;PGP keys are avalible here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="aren-t-pgp-signatures-usually-big-blocks-of-gibberish-at-the-bottom-of-the-email"&gt;
&lt;h2&gt;Aren't PGP signatures usually big blocks of gibberish at the bottom of the email?&lt;/h2&gt;
&lt;p&gt;There are two types of PGP signatures: inline armor (big block of gibberish) and PGP/MIME attachment (signature.asc). Inline PGP signatures ahave been around longer, but they don't play nicely with attachments or HTML formatted emails. Also, the big block of gibberish tends to confuse people more than an attachment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="still-have-questions"&gt;
&lt;h2&gt;Still have Questions?&lt;/h2&gt;
&lt;p&gt;If PGP interests you or you want to know more about PGP read &lt;a class="reference external" href="http://haffner.me/intro-to-pgp.html"&gt;my article on PGP.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Server 101</title><link href="http://haffner.me/server-101.html" rel="alternate"></link><updated>2014-11-02T00:00:00-04:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2014-11-02:server-101.html</id><summary type="html">&lt;h2&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;This guide is meant to be a set of suggestions to help point you in the right direction. I do provide some example config files but they are &lt;strong&gt;only examples&lt;/strong&gt;.
I also mention several services that I have used and found helpful. I am not endorsing these services and encourage you to find if there is a service that suits your needs better.&lt;/p&gt;
&lt;p&gt;This guide also makes a few assumptions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You have a machine or VPS with some sort of linux already installed&lt;/li&gt;
&lt;li&gt;You can figure out how to &lt;a href="http://portforward.com/"&gt;forward ports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You understand that different distributions put config files in different places (This guide is based on Debian)&lt;/li&gt;
&lt;li&gt;You know how to get around a linux system&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Domain Name&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;If you don't understand what domain names are and how DNS works I suggest skimming the wikipedia article on &lt;a href="http://en.wikipedia.org/wiki/Domain_Name_System"&gt;the Domain Name System&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are two ways of getting a domain name. You can buy your own domain name for a website like &lt;a href="https://namecheap.com"&gt;NameCheap&lt;/a&gt; or &lt;a href="https://gandi.net"&gt;gandi.net&lt;/a&gt; or you can get a subdomain for free from websites like &lt;a href="https://duckdns.org"&gt;duckDNS&lt;/a&gt; or &lt;a href="noip.com"&gt;No-IP&lt;/a&gt; (You will not be able to use SSL or HTTPS with a verified SSL certificate if you are on a subdomain).&lt;/p&gt;
&lt;h2&gt;SSH Daemon Config&lt;/h2&gt;
&lt;p&gt;The ssh config file is usually located in /etc/ssh/sshd_config on Debian based systems.  The main thing to worry about is disabling root login. This is important to do, because logging in as root is bad practice and, more importantly, everyone will try to bruteforce into your server as user "root" (take a look at /var/log/auth.log if you don't believe me). Other ways to secure SSH are to only allow &lt;a href="https://help.ubuntu.com/community/SSH/OpenSSH/Keys"&gt;SSH key login&lt;/a&gt; and only allow certain users to login with ssh. The relevant options are below.&lt;/p&gt;
&lt;pre&gt;
PermitRootLogin no
AllowUser USER
PasswordAuthentication no # Make sure you have public key authentication set up if you do this
&lt;/pre&gt;

&lt;p&gt;Another way to secure ssh is by using &lt;a href="https://en.wikipedia.org/wiki/Fail2ban"&gt;fail2ban&lt;/a&gt;, a service that ssh login attempts and will block an IP address of someone who has failed to log into you server after a set amount of times. In Debian based systems if you install it it will set itself up and start automatically. The config files for fail2ban are usually in /etc/fail2ban/ the default options are usually fine, but it would be a good idea to read through the fil2ban man page to see if there are any other options you want to set.&lt;/p&gt;
&lt;h2&gt;Firewall with iptables&lt;/h2&gt;
&lt;p&gt;For some reason most Linux distributions (Debian and Ubuntu server included) ship with all ports open. Having all your ports open is pretty risky, especially if your computer if facing the open internet. The sample iptables rules below are based on &lt;a href="https://wiki.archlinux.org/index.php/Simple_stateful_firewall"&gt;this Arch Linux wiki article&lt;/a&gt; but was modified to work with fail2ban.&lt;/p&gt;
&lt;pre&gt;
# Sample iptables rules.
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:fail2ban-ssh - [0:0]
:TCP - [0:0]
:UDP - [0:0]
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -m icmp --icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP
-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP
-A INPUT -p udp -j DROP
-A INPUT -p tcp -j DROP
## SSH rules
-A TCP -p tcp -m multiport --dports 22 -j fail2ban-ssh
-A fail2ban-ssh -j RETURN
-A TCP -p tcp -m tcp --dport 22 -j ACCEPT
## HTTP(s) rules
-A TCP -p tcp -m tcp --dport 80 -j ACCEPT
-A TCP -p tcp -m tcp --dport 443 -j ACCEPT 
COMMIT
&lt;/pre&gt;

&lt;p&gt;To open additional ports just add them to the UPD or TCP chain depending on what type of traffic you want to allow. Any IP addresses that fail2ban blocks will be added to the fail2ban-ssh chain. To use this set of rules save it in a file and use iptables-restore to load it. Depending on your system, you might need to write a script to reload the rules on boot.&lt;/p&gt;
&lt;h2&gt;Apache and Virtual Hosts&lt;/h2&gt;
&lt;p&gt;Apache defaults to serving content form /var/www in Debian based systems. If you want to serve different content on different domains on the same server, you will want to take a look into Apache virtual hosts. The sample vhost below will server content out of /home/apache/sites/www.sample.com/ when someone is visiting the server with the domain name sample.com or www.sample.com&lt;/p&gt;
&lt;pre&gt;
&amp;ltVirtualHost *:80&amp;gt
    ServerName www.sample.com
    ServerAlias sample.com
    DocumentRoot /home/apache/sites/www.sample.com
&amp;lt/VirtualHost&amp;gt
&lt;/pre&gt;

&lt;h2&gt;SSL Certificates and Related Apache config&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;There is an excellent article on how to use generate SSL certificates with StartSSL &lt;a href="http://wiki.stocksy.co.uk/wiki/Using_StartCom_%28StartSSL%29_to_Generate_valid_SSL_Certificates#Generate_a_CSR_and_Private_Key"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before you use ssl with Apache, you will need to make sure you have port 443 open for tcp connections and you will have to enable mod_ssl in Apache. On this site, I redirect all standard http requests to https requests with the following config that I placed on /etc/apache2/conf.d/force_ssl.conf&lt;/p&gt;
&lt;pre&gt;
&amp;ltVirtualHost *:80&amp;gt
    ServerAlias *
    RewriteEngine On
    RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [redirect=301]
&amp;lt/VirtualHost&amp;gt
&lt;/pre&gt;

&lt;p&gt;Another good idea to protect the people who use you server is to prefer &lt;a href="https://en.wikipedia.org/wiki/Forward_secrecy#Perfect_forward_secrecy"&gt;Perfect Forward Secrecy (PFS)&lt;/a&gt; with the following config.&lt;/p&gt;
&lt;pre&gt;
SSLProtocol +TLSv1.2 +TLSv1.1 +TLSv1
SSLCompression off
SSLHonorCipherOrder on
SSLCipherSuite ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:RC4-SHA:AES256-GCM-SHA384:AES256-SHA256:CAMELLIA256-SHA:ECDHE-RSA-AES128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:CAMELLIA128-SHA
Header add Strict-Transport-Security "max-age=15768000;includeSubDomains"
&lt;/pre&gt;

&lt;p&gt;After you set this option, you will have enable mod_rewrite and to modify your virtual hosts to use your SSL certificates. An example virtual host is below:&lt;/p&gt;
&lt;pre&gt;
&amp;ltVirtualHost *:443&amp;gt
    ServerName sample.com
    ServerAlias www.sample.com
    DocumentRoot /home/apache/sites/www.sample.com
    SSLEngine On
    SSLCertificateFile /CA/certs/www.sample.com-startssl-cert-YYY.pem
        SSLCertificateKeyFile /CA/keys/www.sample.com-startssl-key-YYYY-MM-DDTHH:MM:SS.pem
        SSLCertificateChainFile /CA/startssl/sub.class1.server.ca.pem
        SSLCACertificateFile /CA/startssl/ca.pem
&amp;lt/VirtualHost&amp;gt
&lt;/pre&gt;

&lt;p&gt;Once you have SSL all set up on your server you can check your server with &lt;a href="https://www.ssllabs.com/ssltest/"&gt;Qualys SSL test&lt;/a&gt;. It will probably say something about having a weak signature algorithm if you use StartSSL because of the way StartSSL signs certificates for now. Hopefully StartSSL will start signing certificates with SHA256 soon.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once you have your basic webserver setup working, it is relatively easy to set up other web-based services. If you are looking for an easy way to generate a website with static content check out &lt;a href="http://blog.getpelican.com/"&gt;pelican&lt;/a&gt;. I use pelican with &lt;a href="https://github.com/kd8zev/pelican-theme-zev"&gt;my custom theme&lt;/a&gt; to generate this site. Hope this helped to get your server set up! If you have any questions about this guide shoot an email to stephen at this domain.&lt;/p&gt;</summary></entry><entry><title>Mutt CLI email client</title><link href="http://haffner.me/mutt-cli-email-client.html" rel="alternate"></link><updated>2014-09-19T00:00:00-04:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2014-09-19:mutt-cli-email-client.html</id><summary type="html">&lt;p&gt;Mutt is an awesome CLI email client but it can be a pain to set up. I added config file templates for mutt and its supporting programs to my &lt;a href="https://git.kd8zev.net/?p=dotfiles.git"&gt;dotfile git repo&lt;/a&gt;. Download the templates and follow the directions below to get it all working.&lt;/p&gt;
&lt;h2&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;This setup downloads all the mail to your computer, so do not use this method if you have limited disk space!&lt;/p&gt;
&lt;p&gt;I have this setup on my server at home and I ssh into it from a tmux session from my desktop and laptop to check and send mail. This makes handling attachments very difficult. I am currently testing different methods of sending attachments back and forth without having to manually scp everything.&lt;/p&gt;
&lt;p&gt;I also assume you only have one address book/CardDav account that you use for all your contacts&lt;/p&gt;
&lt;h2&gt;Required Programs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mutt - Duh&lt;/li&gt;
&lt;li&gt;vim - To write mail&lt;/li&gt;
&lt;li&gt;offlineIMAP - To sync all your messages with the mail servers&lt;/li&gt;
&lt;li&gt;msmtp - To sent the mail using smtp&lt;/li&gt;
&lt;li&gt;python-pycard - To syncronize contacts with a CardDav server&lt;/li&gt;
&lt;li&gt;links - To view HTML formatted emails&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Directions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Grab the config file templates from &lt;a href="https://git.kd8zev.net/?p=dotfiles.git"&gt;my git repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;All the "DOT.&lt;em&gt;" files are supposed to be hidden files/folders.  Rename them to ".&lt;/em&gt;"&lt;/li&gt;
&lt;li&gt;Move these files into your home directory&lt;/li&gt;
&lt;li&gt;Edit .offlineimaprc&lt;/li&gt;
&lt;li&gt;Replace "ACCOUNT_#" with whatever names you want&lt;/li&gt;
&lt;li&gt;Replace "imap.domain.com", "user@domain.com", "email@domain.com", and "****" with the correct information&lt;ul&gt;
&lt;li&gt;(NOTE: Unless you are setting up aliases, "user@domain.com" and "email@domain.com" are usually the same thing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Run "offlineimap" to create the folders and do an initial mail sync (This may take a very long time)&lt;/li&gt;
&lt;li&gt;Edit .msmtprc&lt;/li&gt;
&lt;li&gt;Replace "ACCOUNT_#" with the same names you used in .offlineimaprc &lt;/li&gt;
&lt;li&gt;Replace "smtp.domain.com", "user@domain.com", "email@domain.com", and "****" with the correct information&lt;/li&gt;
&lt;li&gt;Edit .muttrc&lt;/li&gt;
&lt;li&gt;Replace "ACCOUNT_#" with the same names you used in .offlineimaprc &lt;/li&gt;
&lt;li&gt;Replace "KEY_ID" with the key you want to use for signing&lt;/li&gt;
&lt;li&gt;Edit .mutt/ACCOUNT_#&lt;/li&gt;
&lt;li&gt;Rename ".mutt/ACCOUNT_#" with the same names you used in .offlineimaprc &lt;/li&gt;
&lt;li&gt;Replace "ACCOUNT_#" in each of the files with the same names you used in .offlineimaprc&lt;/li&gt;
&lt;li&gt;Edit .mutt/macros&lt;/li&gt;
&lt;li&gt;Replace "ACCOUNT_#" with the same names you used in .offlineimaprc &lt;/li&gt;
&lt;li&gt;Edit .mutt/sigs/ACCOUNT_#&lt;/li&gt;
&lt;li&gt;Rename ".mutt/sigs/ACCOUNT_#" with the same names you used in .offlineimaprc&lt;/li&gt;
&lt;li&gt;Replace the contents of each with your signature&lt;/li&gt;
&lt;li&gt;Edit .config/pycard/pycard.conf&lt;/li&gt;
&lt;li&gt;Replace "userneme", "****", and "https://carddavurl.com" with the proper information&lt;/li&gt;
&lt;li&gt;Run "pycardsyncer" to so an initial address book sync&lt;/li&gt;
&lt;li&gt;Add a cron job to run offlineimap and pycardsyncer regularly&lt;ul&gt;
&lt;li&gt;(NOTE: Instead of syncing every account's whole mailbox every minute, you might want to just sync the INBOX forlders every minute with "offlineimap -f INBOX" and do a full sync once or twice a day)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;TODO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Find a good way to handle attachments (Reverse port forwards and scp?)&lt;/li&gt;
&lt;li&gt;Find a good way to not store the passwords in plain text&lt;/li&gt;
&lt;li&gt;Create a auto-setup script&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>New site using Pelican</title><link href="http://haffner.me/new-site-using-pelican.html" rel="alternate"></link><updated>2014-09-10T00:00:00-04:00</updated><author><name>Stephen Haffner</name></author><id>tag:haffner.me,2014-09-10:new-site-using-pelican.html</id><summary type="html">&lt;p&gt;After playing around with a few different website generators I have finally settled on &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;. Pelican is a static site generator written in python that takes Markdown, reStructuredText, or just plain HTML and parses it into nicely formated posts and pages. It also allows you to choose from a bunch of different themes or you can build one yourself.&lt;/p&gt;
&lt;p&gt;I plan to continue to developing my theme (&lt;a href="https://github.com/kd8zev/pelican-theme-zev"&gt;pelican-theme-zev&lt;/a&gt;) so it has an option to display a set page as the home page rather than the most recent posts. But I'll have to dig further into the API of pelican and jinja so thats not a job for tonight :)&lt;/p&gt;</summary></entry></feed>